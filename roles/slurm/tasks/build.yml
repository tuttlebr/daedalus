---
###########################################
# Install dependencies
###########################################

- include: setup-role.yml

- name: configure alternative library path
  template:
    src: etc/ld.so.conf.d/slurm.conf.j2
    dest: /etc/ld.so.conf.d/slurm.conf
    mode: 0644
  register: updated_slurm_ld

- name: update ld cache
  command: ldconfig
  when: updated_slurm_ld.changed # noqa no-handler

- include: munge.yml

- include: hwloc.yml
  tags: hwloc
  when: slurm_include_hwloc

- include: pmix.yml
  tags: pmix
  when: slurm_include_pmix

###########################################
# Build Slurm
###########################################
- name: default to building slurm
  set_fact:
    slurm_build: yes
    slurm_upgrade: no
    slurm_downgrade: no

- name: check installed slurm version
  shell: "{{ slurm_install_prefix }}/sbin/slurmd --version | awk '{print $2}'"
  register: slurmd_reported_version
  ignore_errors: yes
  changed_when: slurmd_reported_version.rc != 0

- name: don't build slurm if it's already installed, unless forced
  set_fact:
    slurm_build: no
  when: slurmd_reported_version.stdout == slurm_version and not slurm_force_rebuild

- name: upgrade?
  set_fact:
    slurm_upgrade: yes
  when: slurmd_reported_version.stdout and slurmd_reported_version.stdout is version(slurm_version, '<')

- name: downgrade?
  set_fact:
    slurm_downgrade: yes
  when: slurmd_reported_version.stdout and slurmd_reported_version.stdout is version(slurm_version, '>')

- name: going to rebuild slurm?
  debug:
    msg: "Rebuild Slurm? {{ slurm_build }}"

- name: install build dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ slurm_build_deps }}"
  when: ansible_distribution == 'Ubuntu'

- name: install build dependencies
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ slurm_build_deps }}"
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7"

- name: install build dependencies
  dnf:
    name: "{{ item }}"
    state: present
    enablerepo: "powertools"
  with_items: "{{ slurm_build_deps }}"
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == "8"

- name: remove slurm packages
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - slurm
    - slurm-wlm
    - slurmctld
    - slurmdbd
    - slurmd
  when: ansible_distribution == 'Ubuntu'
  failed_when: false

- name: remove slurm packages
  yum:
    name: "{{ item }}"
    state: absent
  with_items:
    - slurm
  when: ansible_os_family == 'RedHat'
  failed_when: false

- name: gather service facts
  ansible.builtin.service_facts:

- name: when building, try to uninstall first before downloading source
  when: slurm_build
  block:
    # This service should be stopped before uninstalling slurm
  - name: stop docker slurm exporter service to prevent subfolder creation
    service:
      name: "docker.slurm-exporter.service"
      state: stopped
    when: (ansible_distribution == 'Ubuntu') and 
      ("docker.slurm-exporter.service" in ansible_facts.services)

  - name: check that we have an old build dir
    stat:
      path: "{{ slurm_build_dir }}"
    register: slurm_old_build_dir

  - name: uninstall old verson
    command: make -j uninstall
    args:
      chdir: "{{ slurm_build_dir }}"
    ignore_errors: yes
    when: slurm_old_build_dir.stat.exists

  - name: remove old build dir
    file:
      path: "{{ slurm_build_dir }}"
      state: absent

  - name: remove old lib dir
    file:
      path: "{{ slurm_install_prefix }}/lib/slurm"
      state: absent

- name: make build directory
  file:
    path: "{{ slurm_build_dir }}"
    state: directory
    mode: "0755"
  when: slurm_build

- name: download source
  unarchive:
    src: "{{ slurm_src_url }}"
    remote_src: yes
    dest: "{{ slurm_build_dir }}"
    extra_opts:
      - --strip-components=1
  environment: "{{ proxy_env if proxy_env is defined else {} }}"
  when: slurm_build

- name: clean src dir
  command: make distclean
  args:
    chdir: "{{ slurm_build_dir }}"
  failed_when: false
  when: slurm_build

- name: configure
  command: "{{ slurm_configure }}"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: build
  shell: "make -j$(nproc) > build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: build contrib
  shell: "make -j$(nproc) contrib >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build

- name: install
  shell: "make -j$(nproc) install >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: install contrib
  shell: "make -j$(nproc) install-contrib >> build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: build pam_slurm_adopt
  shell: "make -j$(nproc) >> ../../build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}/contribs/pam_slurm_adopt"
  when: slurm_build

- name: install pam_slurm_adopt
  shell: "make -j$(nproc) install >> ../../build.log 2>&1"
  args:
    chdir: "{{ slurm_build_dir }}/contribs/pam_slurm_adopt"
  when: slurm_build
  notify:
    - restart slurmd
    - restart slurmdbd
    - restart slurmctld

- name: fix library dir permissions
  file:
    path: "{{ slurm_install_prefix }}/lib/slurm"
    state: directory
    mode: 0775

- name: fix deepops dir permissions
  file:
    path: "{{ deepops_dir }}"
    state: directory
    mode: 0755
    recurse: yes

- name: start docker slurm exporter service again
  service:
    name: "docker.slurm-exporter.service"
    state: restarted
  when: (ansible_distribution == 'Ubuntu') and 
      ("docker.slurm-exporter.service" in ansible_facts.services)

