apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.exampleName }}
  labels:
    app: {{ .Values.exampleName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.exampleName }}
  serviceName: {{ .Values.exampleName }}
  replicas: 1
  template:
    metadata:
      labels: 
        app: {{ .Values.exampleName }}
    spec:
      containers:
        - name: {{ .Values.exampleName }}
          image: "{{ .Values.registryName }}:{{ .Values.registryPort }}/{{ .Values.exampleName }}"
          ports:
            - name: jupyter
              containerPort: 8888
              protocol: TCP
          args:
            - jupyter
            - lab
            - --ip=0.0.0.0
            - --no-browser
            - --allow-root
            - --port=8888
            - --NotebookApp.token=''
            - --NotebookApp.password=''
            - --NotebookApp.allow_origin='*'
            - --NotebookApp.base_url=/
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
          resources: {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
        - name: {{ .Values.exampleName }}-init
          image: gcr.io/kaniko-project/executor:debug
          args:
            - "--insecure"
            - "--context=git://github.com/NVIDIA/DeepLearningExamples.git"
            - "--destination={{ .Values.internalRegistryName }}:{{ .Values.internalRegistryPort }}/{{ .Values.exampleName }}"
            - "--verbosity=debug"
            {{ if eq .Values.exampleName "cuda-optimized-fastspeech" }}
            - "--context-sub-path=CUDA-Optimized/FastSpeech"
            {{ else if eq .Values.exampleName "dglpytorch-drugdiscovery-se3transformer" }}
            - "--context-sub-path=DGLPyTorch/DrugDiscovery/SE3Transformer"
            {{ else if eq .Values.exampleName "kaldi-speechrecognition" }}
            - "--context-sub-path=Kaldi/SpeechRecognition"
            {{ else if eq .Values.exampleName "mxnet-classification" }}
            - "--context-sub-path=MxNet/Classification/RN50v1.5"
            {{ else if eq .Values.exampleName "pytorch-classification-convnets" }}
            - "--context-sub-path=PyTorch/Classification/ConvNets"
            {{ else if eq .Values.exampleName "pytorch-detection-efficientdet" }}
            - "--context-sub-path=PyTorch/Detection/Efficientdet"
            {{ else if eq .Values.exampleName "pytorch-detection-ssd" }}
            - "--context-sub-path=PyTorch/Detection/SSD"
            {{ else if eq .Values.exampleName "pytorch-forecasting-tft" }}
            - "--context-sub-path=PyTorch/Forecasting/TFT"
            {{ else if eq .Values.exampleName "pytorch-languagemodeling-bart" }}
            - "--context-sub-path=PyTorch/LanguageModeling/BART"
            {{ else if eq .Values.exampleName "pytorch-languagemodeling-bert" }}
            - "--context-sub-path=PyTorch/LanguageModeling/BERT"
            {{ else if eq .Values.exampleName "pytorch-languagemodeling-transformer-xl" }}
            - "--context-sub-path=PyTorch/LanguageModeling/Transformer-XL"
            {{ else if eq .Values.exampleName "pytorch-recommendation-dlrm" }}
            - "--context-sub-path=PyTorch/Recommendation/DLRM"
            {{ else if eq .Values.exampleName "pytorch-recommendation-ncf" }}
            - "--context-sub-path=PyTorch/Recommendation/NCF"
            {{ else if eq .Values.exampleName "pytorch-segmentation-maskrcnn" }}
            - "--context-sub-path=PyTorch/Segmentation/MaskRCNN"
            {{ else if eq .Values.exampleName "pytorch-segmentation-nnunet" }}
            - "--context-sub-path=PyTorch/Segmentation/nnUNet"
            {{ else if eq .Values.exampleName "pytorch-speechrecognition-jasper" }}
            - "--context-sub-path=PyTorch/SpeechRecognition/Jasper"
            {{ else if eq .Values.exampleName "pytorch-speechrecognition-quartznet" }}
            - "--context-sub-path=PyTorch/SpeechRecognition/QuartzNet"
            {{ else if eq .Values.exampleName "pytorch-speechsynthesis-fastpitch" }}
            - "--context-sub-path=PyTorch/SpeechSynthesis/FastPitch"
            {{ else if eq .Values.exampleName "pytorch-speechsynthesis-tacotron2" }}
            - "--context-sub-path=PyTorch/SpeechSynthesis/Tacotron2"
            {{ else if eq .Values.exampleName "pytorch-translation-gnmt" }}
            - "--context-sub-path=PyTorch/Translation/GNMT"
            {{ else if eq .Values.exampleName "pytorch-translation-transformer" }}
            - "--context-sub-path=PyTorch/Translation/Transformer"
            {{ else if eq .Values.exampleName "tensorflow-classification-convnets" }}
            - "--context-sub-path=TensorFlow/Classification/ConvNets"
            {{ else if eq .Values.exampleName "tensorflow-detection-ssd" }}
            - "--context-sub-path=TensorFlow/Detection/SSD"
            {{ else if eq .Values.exampleName "tensorflow-languagemodeling-bert" }}
            - "--context-sub-path=TensorFlow/LanguageModeling/BERT"
            {{ else if eq .Values.exampleName "tensorflow-languagemodeling-transformerxl" }}
            - "--context-sub-path=TensorFlow/LanguageModeling/Transformer-XL"
            {{ else if eq .Values.exampleName "tensorflow-recommendation-ncf" }}
            - "--context-sub-path=TensorFlow/Recommendation/NCF"
            {{ else if eq .Values.exampleName "tensorflow-recommendation-vaecf" }}
            - "--context-sub-path=TensorFlow/Recommendation/VAE-CF"
            {{ else if eq .Values.exampleName "tensorflow-recommendation-wideanddeep" }}
            - "--context-sub-path=TensorFlow/Recommendation/WideAndDeep"
            {{ else if eq .Values.exampleName "tensorflow-segmentation-unet3dmedical" }}
            - "--context-sub-path=TensorFlow/Segmentation/UNet_3D_Medical"
            {{ else if eq .Values.exampleName "tensorflow-segmentation-unetindustrial" }}
            - "--context-sub-path=TensorFlow/Segmentation/UNet_Industrial"
            {{ else if eq .Values.exampleName "tensorflow-segmentation-unetmedical" }}
            - "--context-sub-path=TensorFlow/Segmentation/UNet_Medical"
            {{ else if eq .Values.exampleName "tensorflow-segmentation-vnet" }}
            - "--context-sub-path=TensorFlow/Segmentation/VNet"
            {{ else if eq .Values.exampleName "tensorflow-translation-gnmt" }}
            - "--context-sub-path=TensorFlow/Translation/GNMT"
            {{ else if eq .Values.exampleName "tensorflow2-efficientnet" }}
            - "--context-sub-path=TensorFlow2/Classification/ConvNets/efficientnet"
            {{ else if eq .Values.exampleName "tensorflow2-languagemodeling-bert" }}
            - "--context-sub-path=TensorFlow2/LanguageModeling/BERT"
            {{ else if eq .Values.exampleName "tensorflow2-languagemodeling-electra" }}
            - "--context-sub-path=TensorFlow2/LanguageModeling/ELECTRA"
            {{ else if eq .Values.exampleName "tensorflow2-recommendation-dlrm" }}
            - "--context-sub-path=TensorFlow2/Recommendation/DLRM"
            {{ else if eq .Values.exampleName "tensorflow2-recommendation-wideanddeep" }}
            - "--context-sub-path=TensorFlow2/Recommendation/WideAndDeep"
            {{ else if eq .Values.exampleName "tensorflow2-segmentation-maskrcnn" }}
            - "--context-sub-path=TensorFlow2/Segmentation/MaskRCNN"
            {{ else }}
            - "--context-sub-path=PyTorch/Detection/Efficientdet"
            {{ end }}
      volumes:
        - name: dshm
          emptyDir: {}
 
